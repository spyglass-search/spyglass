name: "Tauri - Publish"
on:
  push:
    branches:
      - release
jobs:
  publish-tauri:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, 'ubuntu-20.04', 'windows-latest']

    runs-on: ${{ matrix.platform }}
    steps:
    - uses: actions/checkout@v2
    - name: setup node
      uses: actions/setup-node@v1
      with:
        node-version: 16
    - name: install Rust stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    # Install dependencies for plugins/client
    - name: install wasm target
      run: rustup target add wasm32-unknown-unknown
    - name: install wasm32-wasi toolchain
      run: rustup target add wasm32-wasi
    # Install macos specific targets
    - name: install arm64 rust target (macos only)
      if: matrix.platform == 'macos-latest'
      run: rustup target add aarch64-apple-darwin
    # Install tauri build deps
    - name: install tauri-cli & tauri-build
      run: cargo install tauri-cli --version "^1.1"
    - name: install trunk
      run: cargo install --locked trunk
    - name: install dependencies (ubuntu only)
      if: matrix.platform == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          webkit2gtk-4.0 \
          libappindicator3-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          patchelf
    # Setup arch targets - linux
    - name: setup arch target - linux
      if: ${{startsWith(matrix.platform, 'ubuntu')}}
      run: |
        echo "target_arch=$(rustc -Vv | grep host | awk '{print $2 " "}')" >> $GITHUB_ENV
        echo "target_ext=" >> $GITHUB_ENV
    - name: setup arch target - macos
      if: ${{startsWith(matrix.platform, 'macos')}}
      run: |
        echo "target_arch=x86_64-apple-darwin" >> $GITHUB_ENV
        echo "target_ext=" >> $GITHUB_ENV
    - name: Setup arch target (windows only)
      if: ${{startsWith(matrix.platform, 'windows')}}
      run: |
        echo "target_arch=x86_64-pc-windows-msvc" >> $env:GITHUB_ENV
        echo "target_ext=.exe" >> $env:GITHUB_ENV
    # Build stuff
    - name: build sidecar (windows/linux)
      run: |
        cargo build -p spyglass --verbose --release
        mkdir -p crates/tauri/binaries
        cp target/release/spyglass${{ env.target_ext }} crates/tauri/binaries/spyglass-server-${{ env.target_arch }}${{ env.target_ext }}
    - name: build default plugins
      run: make build-plugins-release
    - name: import windows certificate
      if: matrix.platform == 'windows-latest'
      env:
        WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
        WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
      run: |
        New-Item -ItemType directory -Path certificate
        Set-Content -Path certificate/tempCert.txt -Value $env:WINDOWS_CERTIFICATE
        certutil -decode certificate/tempCert.txt certificate/certificate.pfx
        Remove-Item -path certificate -include tempCert.txt
        Import-PfxCertificate -FilePath certificate/certificate.pfx -CertStoreLocation Cert:\CurrentUser\My -Password (ConvertTo-SecureString -String $env:WINDOWS_CERTIFICATE_PASSWORD -Force -AsPlainText)
    - uses: tauri-apps/tauri-action@v0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        # required for macOS code signing
        ENABLE_CODE_SIGNING: ${{ secrets.APPLE_CERTIFICATE }}
        APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
        APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
      with:
        # the action automatically replaces \_\_VERSION\_\_ with the app version
        tagName: v20__VERSION__
        tauriScript: cargo tauri
        releaseName: "Spyglass v20__VERSION__"
        releaseBody: "See the assets to download this version and install."
        releaseDraft: true
        prerelease: false