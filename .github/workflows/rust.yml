name: Rust check/build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  ARCH: x86_64-unknown-linux-gnu
jobs:
  build:
    runs-on: ${{ matrix.os }}
    env:
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        # build: [ubuntu64, win64]
        build: [ubuntu64]
        include:
          - build: ubuntu64
            os: ubuntu-latest
            host_target: x86_64-unknown-linux-gnu
          # - build: win64
          #   os: windows-latest
          #   host_target: x86_64-pc-windows-msvc
    steps:
    # Checkout source code
    - uses: actions/checkout@v3
    # Cleanup Disk
    - name: Cleanup Disk
      if: matrix.os == 'ubuntu-latest'
      run: |
        df -h;
        sudo rm -rf /usr/local/lib/android;
        sudo rm -rf /usr/share/dotnet;
        df -h
    # Setup rust toolchain
    - name: Setup rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        target: wasm32-unknown-unknown
        components: clippy
    # Setup wasm32-wasi toolchain
    - name: setup wasm32-wasi toolchain
      run: rustup target add wasm32-wasi
    # Should help bring down build times
    - uses: Swatinem/rust-cache@v1
      with:
        key: "1" # increment this to bust the cache if needed
    - name: Install tauri system deps
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update -y
        make setup-dev-linux
        make setup-dev
    - name: Build crates
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --all
    # Run tests
    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --verbose --all
    # Run clippy
    - name: Run clippy
      uses: actions-rs/cargo@v1
      with:
        command: clippy
        args: -- -D warnings
    # make sure we ran fmt
    - name: run fmt check
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: --all --check
    # Run spyglass backend in check mode to validate migrations & other basic startup
    # procedures.
    - name: run spyglass checks
      run: cargo run -p spyglass -- --check
